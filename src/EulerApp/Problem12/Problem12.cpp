//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// The sequence of triangle numbers is generated by adding the natural numbers.So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be :
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers :
//
// 1 : 1
// 3 : 1, 3
// 6 : 1, 2, 3, 6
// 10 : 1, 2, 5, 10
// 15 : 1, 3, 5, 15
// 21 : 1, 3, 7, 21
// 28 : 1, 2, 4, 7, 14, 28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors ?
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Problem12.h"

#include <iostream>

// Constructor
Problem12::Problem12() :
   BaseProblem()
{

}

// Destructor
Problem12::~Problem12()
{

}

// Main execution function
void Problem12::Execute()
{
   long long triangleNumCount = 1;
   long long currentTriangleNum = 1;
   int highestDivisorCount = 0;
   int divisorsToFind = 500;

   while (true)
   {
      ++triangleNumCount;
      currentTriangleNum += triangleNumCount;

      int divisors = 0;
      for (long long i = 1; i <= currentTriangleNum; ++i)
      {
         if (currentTriangleNum % i == 0)
         {
            ++divisors;
         }
      }

      if (divisors > highestDivisorCount)
      {
         highestDivisorCount = divisors;
#ifdef VERBOSE
         std::cout << "Triangle number #" << triangleNumCount << ": " << currentTriangleNum << " has " << highestDivisorCount << " divisors" << std::endl;
#endif
         if (highestDivisorCount > divisorsToFind)
         {
            break;
         }
      }
   }

   std::cout << "Triangle number #" << triangleNumCount << ": " << currentTriangleNum << " has " << highestDivisorCount << " divisors" << std::endl;
}
